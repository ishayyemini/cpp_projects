<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/hw_3/gameManager/GameLogger.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hw_3/gameManager/GameLogger.h" />
              <option name="originalContent" value="#ifndef LOGGER_H&#10;#define LOGGER_H&#10;&#10;#include &lt;fstream&gt;&#10;#include &lt;map&gt;&#10;#include &lt;string&gt;&#10;#include &lt;vector&gt;&#10;&#10;#include &quot;ActionRequest.h&quot;&#10;&#10;namespace GameManager_322868852_340849710 {&#10;    class GameLogger {&#10;    public:&#10;        GameLogger() : initialized(false) {&#10;        }&#10;&#10;        void logActions(std::vector&lt;std::tuple&lt;bool, ActionRequest, bool, bool&gt; &gt; actions);&#10;&#10;        void logResult(const std::string &amp;message);&#10;&#10;        bool init(const std::string &amp;map_name);&#10;&#10;        void close();&#10;&#10;        ~GameLogger() {&#10;            close();&#10;        }&#10;&#10;        // TODO rule of 5&#10;&#10;    private:&#10;        // File stream&#10;        std::ofstream out_file;&#10;&#10;        // Initialization status&#10;        bool initialized;&#10;    };&#10;&#10;&#10;    inline std::map&lt;ActionRequest, std::string&gt; action_strings = {&#10;        {ActionRequest::DoNothing, &quot;None&quot;},&#10;        {ActionRequest::MoveForward, &quot;Move Forward&quot;},&#10;        {ActionRequest::MoveBackward, &quot;Move Backward&quot;},&#10;        {ActionRequest::RotateLeft45, &quot;Rotate Left Eighth&quot;},&#10;        {ActionRequest::RotateRight45, &quot;Rotate Right Eighth&quot;},&#10;        {ActionRequest::RotateLeft90, &quot;Rotate Left Quarter&quot;},&#10;        {ActionRequest::RotateRight90, &quot;Rotate Right Quarter&quot;},&#10;        {ActionRequest::Shoot, &quot;Shoot&quot;},&#10;        {ActionRequest::GetBattleInfo, &quot;Get Battle Info&quot;},&#10;    };&#10;}&#10;&#10;#endif // LOGGER_H&#10;" />
              <option name="updatedContent" value="#ifndef LOGGER_H&#10;#define LOGGER_H&#10;&#10;#include &lt;fstream&gt;&#10;#include &lt;map&gt;&#10;#include &lt;string&gt;&#10;#include &lt;vector&gt;&#10;&#10;#include &quot;ActionRequest.h&quot;&#10;&#10;namespace GameManager_322868852_340849710 {&#10;    class GameLogger {&#10;    public:&#10;        GameLogger() : initialized(false) {&#10;        }&#10;&#10;        void logActions(std::vector&lt;std::tuple&lt;bool, ActionRequest, bool, bool&gt; &gt; actions);&#10;&#10;        void logResult(const std::string &amp;message);&#10;&#10;        bool init(const std::string &amp;map_name);&#10;&#10;        void close();&#10;&#10;        ~GameLogger() {&#10;            close();&#10;        }&#10;&#10;        // Copy constructor&#10;        GameLogger(const GameLogger&amp; other) : initialized(false) {&#10;            // Cannot copy file streams, so we don't copy the state&#10;            // User would need to call init() again on the copied object&#10;        }&#10;&#10;        // Copy assignment operator&#10;        GameLogger&amp; operator=(const GameLogger&amp; other) {&#10;            if (this != &amp;other) {&#10;                close(); // Close current file if open&#10;                initialized = false;&#10;                // Cannot copy file streams, so we don't copy the state&#10;                // User would need to call init() again on the assigned object&#10;            }&#10;            return *this;&#10;        }&#10;&#10;        // Move constructor&#10;        GameLogger(GameLogger&amp;&amp; other) noexcept : &#10;            out_file(std::move(other.out_file)), &#10;            initialized(other.initialized) {&#10;            other.initialized = false;&#10;        }&#10;&#10;        // Move assignment operator&#10;        GameLogger&amp; operator=(GameLogger&amp;&amp; other) noexcept {&#10;            if (this != &amp;other) {&#10;                close(); // Close current file if open&#10;                out_file = std::move(other.out_file);&#10;                initialized = other.initialized;&#10;                other.initialized = false;&#10;            }&#10;            return *this;&#10;        }&#10;&#10;    private:&#10;        // File stream&#10;        std::ofstream out_file;&#10;&#10;        // Initialization status&#10;        bool initialized;&#10;    };&#10;&#10;&#10;    inline std::map&lt;ActionRequest, std::string&gt; action_strings = {&#10;        {ActionRequest::DoNothing, &quot;None&quot;},&#10;        {ActionRequest::MoveForward, &quot;Move Forward&quot;},&#10;        {ActionRequest::MoveBackward, &quot;Move Backward&quot;},&#10;        {ActionRequest::RotateLeft45, &quot;Rotate Left Eighth&quot;},&#10;        {ActionRequest::RotateRight45, &quot;Rotate Right Eighth&quot;},&#10;        {ActionRequest::RotateLeft90, &quot;Rotate Left Quarter&quot;},&#10;        {ActionRequest::RotateRight90, &quot;Rotate Right Quarter&quot;},&#10;        {ActionRequest::Shoot, &quot;Shoot&quot;},&#10;        {ActionRequest::GetBattleInfo, &quot;Get Battle Info&quot;},&#10;    };&#10;}&#10;&#10;#endif // LOGGER_H" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>